{"version":3,"sources":["utils/fetchClient.ts","PostsContext.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","CommentsContext.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","UsersContext.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsContext","React","createContext","postsFromServer","errorMessage","selectedUser","noPostsMessage","isLoading","currentPost","setSelectedUser","setCurrentPost","PostsProvide","children","useState","setPostsFromServer","setErrorMessage","setNoPostsMessage","setIsLoading","useEffect","a","id","posts","length","value","Provider","PostsList","useContext","className","map","post","title","type","cn","onClick","Loader","CommentsContext","commentsFromServer","setCommentsFromServer","CommentsProvide","comments","NewCommentForm","name","setName","hasNameError","setHasNameError","email","setEmail","hasEmailError","setHasEmailError","bodyText","setBodyText","hasBodyTextError","setHasBodyTextError","addComment","event","preventDefault","creatComment","postId","newComment","updatedComments","htmlFor","placeholder","onChange","e","currentTarget","PostDetails","writeComment","setWriteComment","handleDeleteComment","commentId","filter","comment","printError","href","UsersContext","usersFromServer","UsersProvide","setUsersFromServer","users","UserSelector","isButtonActive","setIsButtonActive","v","onBlur","role","user","onMouseDown","App","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c69294c.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState, useEffect } from 'react';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\n\ntype PostsContextType = {\n  postsFromServer: Post[] | null;\n  errorMessage: boolean;\n  selectedUser: User | null;\n  noPostsMessage: boolean;\n  isLoading: boolean;\n  currentPost: Post | null;\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>;\n  setCurrentPost: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostsContext = React.createContext<PostsContextType>({\n  postsFromServer: null,\n  errorMessage: false,\n  selectedUser: null,\n  noPostsMessage: false,\n  isLoading: false,\n  currentPost: null,\n  setSelectedUser: () => { },\n  setCurrentPost: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostsProvide: React.FC<Props> = ({ children }) => {\n  const [postsFromServer, setPostsFromServer] = useState<Post[] | null>(null);\n  const [errorMessage, setErrorMessage] = useState<boolean>(false);\n  const [noPostsMessage, setNoPostsMessage] = useState<boolean>(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [currentPost, setCurrentPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setErrorMessage(false);\n    }\n\n    if (selectedUser) {\n      setIsLoading(true);\n\n      (async () => {\n        try {\n          const posts: Post[] = await client.get(`/posts?userId=${selectedUser?.id}`);\n\n          if (!posts.length) {\n            setNoPostsMessage(true);\n            setPostsFromServer(posts);\n\n            return;\n          }\n\n          setPostsFromServer(posts);\n        } catch {\n          setErrorMessage(true);\n        } finally {\n          setIsLoading(false);\n        }\n      })();\n    }\n  }, [selectedUser]);\n\n  const value = {\n    postsFromServer,\n    errorMessage,\n    selectedUser,\n    noPostsMessage,\n    isLoading,\n    currentPost,\n    setSelectedUser,\n    setCurrentPost,\n  };\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { PostsContext } from '../PostsContext';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const {\n    postsFromServer,\n    currentPost,\n    setCurrentPost,\n  } = useContext(PostsContext);\n\n  const handleClick = (value: Post) => {\n    if (currentPost?.id === value.id) {\n      setCurrentPost(null);\n\n      return;\n    }\n\n    setCurrentPost(value);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {postsFromServer?.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link', {\n                    'is-light': currentPost?.id !== post.id,\n                  })}\n                  onClick={() => handleClick(post)}\n                >\n                  {currentPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useEffect, useState } from 'react';\nimport { client } from './utils/fetchClient';\nimport { Comment } from './types/Comment';\nimport { PostsContext } from './PostsContext';\n\ntype CommentsContextType = {\n  commentsFromServer: Comment[];\n  errorMessage: string;\n  isLoading: boolean;\n  setCommentsFromServer: React.Dispatch<React.SetStateAction<Comment[]>>;\n  setErrorMessage: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const CommentsContext = React.createContext<CommentsContextType>({\n  commentsFromServer: [],\n  errorMessage: '',\n  isLoading: false,\n  setCommentsFromServer: () => {},\n  setErrorMessage: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const CommentsProvide: React.FC<Props> = ({ children }) => {\n  const [commentsFromServer, setCommentsFromServer] = useState<Comment[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const { currentPost } = useContext(PostsContext);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setErrorMessage('');\n    }\n\n    if (currentPost) {\n      setIsLoading(true);\n\n      (async () => {\n        try {\n          const comments: Comment[] = await client.get(`/comments?postId=${currentPost.id}`);\n\n          setCommentsFromServer(comments);\n        } catch {\n          setErrorMessage('load');\n        } finally {\n          setIsLoading(false);\n        }\n      })();\n    }\n  }, [currentPost]);\n\n  const value = {\n    commentsFromServer,\n    errorMessage,\n    isLoading,\n    setCommentsFromServer,\n    setErrorMessage,\n  };\n\n  return (\n    <CommentsContext.Provider value={value}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { PostsContext } from '../PostsContext';\nimport { client } from '../utils/fetchClient';\nimport { CommentsContext } from '../CommentsContext';\nimport { Comment } from '../types/Comment';\n\nexport const NewCommentForm: React.FC = () => {\n  const { currentPost } = useContext(PostsContext);\n  const {\n    setErrorMessage,\n    commentsFromServer,\n    setCommentsFromServer,\n  } = useContext(CommentsContext);\n  const [name, setName] = useState<string>('');\n  const [hasNameError, setHasNameError] = useState<boolean>(false);\n  const [email, setEmail] = useState<string>('');\n  const [hasEmailError, setHasEmailError] = useState<boolean>(false);\n  const [bodyText, setBodyText] = useState<string>('');\n  const [hasBodyTextError, setHasBodyTextError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.currentTarget.value);\n    setHasNameError(false);\n  };\n\n  const handleEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.currentTarget.value);\n    setHasEmailError(false);\n  };\n\n  const handleBody = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBodyText(e.currentTarget.value);\n    setHasBodyTextError(false);\n  };\n\n  const addComment = async (event: React.FormEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    setHasNameError(!name);\n    setHasEmailError(!email);\n    setHasBodyTextError(!bodyText);\n\n    if (!name || !email || !bodyText) {\n      return;\n    }\n\n    const creatComment = {\n      postId: currentPost?.id,\n      name,\n      email,\n      body: bodyText,\n    };\n\n    try {\n      setIsLoading(true);\n      const newComment: Comment = await client.post('/comments', creatComment);\n      const updatedComments: Comment[] = [...commentsFromServer, newComment];\n\n      setCommentsFromServer(updatedComments);\n      setBodyText('');\n    } catch {\n      setErrorMessage('add');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearForm = () => {\n    setHasNameError(false);\n    setHasEmailError(false);\n    setHasBodyTextError(false);\n    setName('');\n    setEmail('');\n    setBodyText('');\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className={cn('control has-icons-left', {\n          'has-icons-right': hasNameError,\n        })}\n        >\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': hasNameError,\n            })}\n            value={name}\n            onChange={handleName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className={cn('control has-icons-left', {\n          'has-icons-right': hasEmailError,\n        })}\n        >\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': hasEmailError,\n            })}\n            value={email}\n            onChange={handleEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': hasBodyTextError,\n            })}\n            value={bodyText}\n            onChange={handleBody}\n          />\n        </div>\n        {hasBodyTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n            onClick={addComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => clearForm()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable no-nested-ternary */\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentsContext } from '../CommentsContext';\nimport { PostsContext } from '../PostsContext';\nimport { client } from '../utils/fetchClient';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    commentsFromServer,\n    isLoading,\n    errorMessage,\n    setCommentsFromServer,\n    setErrorMessage,\n  } = useContext(CommentsContext);\n  const { currentPost } = useContext(PostsContext);\n\n  const [writeComment, setWriteComment] = useState<boolean>(false);\n  const handleDeleteComment = async (commentId: number) => {\n    try {\n      await client.delete(`/comments/${commentId}`);\n    } catch {\n      setErrorMessage('delete');\n    } finally {\n      let updatedComments = [...commentsFromServer];\n\n      updatedComments = updatedComments\n        .filter(comment => comment.id !== commentId);\n\n      setCommentsFromServer(updatedComments);\n    }\n  };\n\n  const printError = () => {\n    switch (errorMessage) {\n      case 'add':\n        return 'Can not add comment';\n\n      case 'delete':\n        return 'Can not delete comment';\n\n      default:\n        return 'Something went wrong';\n    }\n  };\n\n  useEffect(() => {\n    if (writeComment || errorMessage) {\n      setWriteComment(false);\n    }\n  }, [currentPost, errorMessage]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${currentPost?.id} ${currentPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (\n            <Loader />\n          ) : errorMessage ? (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {printError()}\n            </div>\n          ) : commentsFromServer.length > 0 ? (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              <article className=\"message is-small\" data-cy=\"Comment\">\n                {commentsFromServer.map(comment => (\n                  <div key={comment.id}>\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </div>\n                ))}\n              </article>\n              {!writeComment && (\n                <>\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setWriteComment(true)}\n                  >\n                    Write a comment\n                  </button>\n                </>\n              )}\n            </>\n          ) : (\n            <>\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n              {!writeComment && (\n                <>\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setWriteComment(true)}\n                  >\n                    Write a comment\n                  </button>\n                </>\n              )}\n            </>\n          )}\n        </div>\n\n        {writeComment && (\n          <NewCommentForm />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\n\ntype UsersContextType = {\n  usersFromServer: User[];\n  errorMessage: boolean;\n};\n\nexport const UsersContext = React.createContext<UsersContextType>({\n  usersFromServer: [],\n  errorMessage: false,\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UsersProvide: React.FC<Props> = ({ children }) => {\n  const [usersFromServer, setUsersFromServer] = useState<User[]>([]);\n  const [errorMessage, setErrorMessage] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const users:User[] = await client.get('/users');\n\n        setUsersFromServer(users);\n      } catch {\n        setErrorMessage(true);\n      }\n    })();\n  }, []);\n\n  const value = {\n    usersFromServer,\n    errorMessage,\n  };\n\n  return (\n    <UsersContext.Provider value={value}>\n      {children}\n    </UsersContext.Provider>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { UsersContext } from '../UsersContext';\nimport { PostsContext } from '../PostsContext';\n\nexport const UserSelector: React.FC = () => {\n  const { usersFromServer } = useContext(UsersContext);\n  const { selectedUser, setSelectedUser } = useContext(PostsContext);\n  const [isButtonActive, setIsButtonActive] = useState<boolean>(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isButtonActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsButtonActive(v => !v)}\n          onBlur={() => setIsButtonActive(false)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {usersFromServer.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onMouseDown={() => {\n                setSelectedUser(user);\n                setIsButtonActive(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-nested-ternary */\nimport React, { useContext } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { PostsContext } from './PostsContext';\n\nexport const App: React.FC = () => {\n  const {\n    selectedUser,\n    postsFromServer,\n    isLoading,\n    currentPost,\n    errorMessage,\n  } = useContext(PostsContext);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n                {postsFromServer && (postsFromServer.length > 0 ? (\n                  <PostsList />\n                ) : !isLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                ))}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {currentPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvide } from './UsersContext';\nimport { PostsProvide } from './PostsContext';\nimport { CommentsProvide } from './CommentsContext';\n\nReactDOM.render(\n  <UsersProvide>\n    <PostsProvide>\n      <CommentsProvide>\n        <App />\n      </CommentsProvide>\n    </PostsProvide>\n  </UsersProvide>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}